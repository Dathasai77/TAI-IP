import tkinter as tk
from tkinter import messagebox
import random
import threading
import time

class Question:
    def __init__(self, text, options, correct_option):
        self.text = text
        self.options = options
        self.correct_option = correct_option

class QuizApp:
    def __init__(self, master, questions):
        self.master = master
        self.master.title("Quiz Application")
        self.questions = questions
        self.current_question_index = 0
        self.score = 0
        self.timer_seconds = 0
        self.timer_label = tk.Label(master, text="Time left: 0s")
        self.timer_label.pack(pady=10)
        self.timer_running = False

        self.question_label = tk.Label(master, text="")
        self.question_label.pack(pady=10)

        self.option_var = tk.StringVar()
        self.options_radios = []
        for i in range(4):
            radio = tk.Radiobutton(master, text="", variable=self.option_var, value=str(i + 1))
            radio.pack()
            self.options_radios.append(radio)

        self.start_button = tk.Button(master, text="Start", command=self.start_quiz)
        self.start_button.pack(pady=10)

        self.next_button = tk.Button(master, text="Next", command=self.next_question, state=tk.DISABLED)
        self.next_button.pack(pady=10)

        self.pause_button = tk.Button(master, text="Pause", command=self.pause_quiz, state=tk.DISABLED)
        self.pause_button.pack(pady=10)

        self.restart_button = tk.Button(master, text="Restart", command=self.restart_quiz, state=tk.DISABLED)
        self.restart_button.pack(pady=10)

        self.display_question()

    def start_timer(self):
        self.timer_running = True
        while self.timer_seconds > 0 and self.timer_running:
            time.sleep(1)
            self.timer_seconds -= 1
            self.timer_label.config(text=f"Time left: {self.timer_seconds}s")

        if self.timer_seconds == 0 and self.timer_running:
            self.next_question()

    def start_quiz(self):
        self.score = 0
        self.current_question_index = 0
        self.start_button.config(state=tk.DISABLED)
        self.next_button.config(state=tk.NORMAL)
        self.pause_button.config(state=tk.NORMAL)
        self.restart_button.config(state=tk.NORMAL)
        self.timer_seconds = 10  # Set the timer duration (in seconds)
        self.timer_label.config(text=f"Time left: {self.timer_seconds}s")
        self.display_question()
        threading.Thread(target=self.start_timer).start()

    def pause_quiz(self):
        self.timer_running = False
        self.start_button.config(state=tk.NORMAL)
        self.next_button.config(state=tk.DISABLED)
        self.pause_button.config(state=tk.DISABLED)
        self.restart_button.config(state=tk.NORMAL)

    def restart_quiz(self):
        self.start_quiz()

    def display_question(self):
        if self.current_question_index < len(self.questions):
            question = random.choice(self.questions)  # Randomly select a question
            self.questions.remove(question)

            self.question_label.config(text=question.text)

            for i in range(4):
                self.options_radios[i].config(text=question.options[i])

        else:
            self.show_score()

    def next_question(self):
        if not self.option_var.get():
            messagebox.showinfo("Alert", "Please select an option.")
        else:
            question = self.questions[self.current_question_index]
            if question.correct_option == int(self.option_var.get()):
                self.score += 1

            self.current_question_index += 1
            self.option_var.set("")  # Reset option selection
            self.display_question()

    def show_score(self):
        messagebox.showinfo("Quiz Completed", f"Your score: {self.score}/{len(self.questions)}")
        self.start_button.config(state=tk.NORMAL)
        self.next_button.config(state=tk.DISABLED)
        self.pause_button.config(state=tk.DISABLED)
        self.restart_button.config(state=tk.DISABLED)
        self.timer_label.config(text="Time left: 0s")

# Sample question bank
question_bank = [
    Question("What is the capital of France?", ["Paris", "Berlin", "Madrid", "Rome"], 1),
    Question("Which programming language is this quiz written in?", ["Python", "Java", "C++", "JavaScript"], 1),
    Question("What is the largest planet in our solar system?", ["Earth", "Jupiter", "Mars", "Venus"], 2),
]

# Create the main window
root = tk.Tk()

# Create the quiz application
quiz_app = QuizApp(root, question_bank)

# Run the application
root.mainloop()
